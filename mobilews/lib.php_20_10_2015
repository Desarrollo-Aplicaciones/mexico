<?php
include(dirname(__FILE__).'/../config/config.inc.php');
include(dirname(__FILE__).'/../init.php');

class Lib extends FrontController {
    
    private function imgs_product($id_product=null)
    {
        if($id_product!=null)
        {   $array_img=null;
            $query="SELECT i.id_image
			FROM ps_image i
			LEFT JOIN ps_image_lang il ON (i.id_image = il.id_image)
			WHERE i.id_product = ".$id_product." AND il.id_lang = 1
			ORDER BY i.position  ASC";
            
        if ($results = Db::getInstance()->ExecuteS($query)){
            foreach ($results as $value) {
                
                $array_img[] = _PS_BASE_URL_.__PS_BASE_URI__.$value['id_image']."-home_default/img.jpg";
            }
         if($array_img!=NULL)
             
             return $array_img;
        }     
 
        }
         $array_img[]=  _PS_BASE_URL_.__PS_BASE_URI__.'img/p/es-default-home_default.jpg';
        return $array_img;
    }


    function buscarProductos($buscar, $pagina = 1, $filas = 10, $ordenar = null, $campo = null) {
        $array_productos = NULL;


        $buscar = utf8_encode($this->remomeCharSql($this->sanear_string($buscar)));


        if ($buscar != NULL && strlen(trim($buscar)) >= 4) {
            if ($filas > 20) {
                $filas = 20;
            }

            /*
             * Validacioner ordenar
             */
            if ($ordenar != NULL && $campo != NULL) {

                if ($ordenar === 'A') {
                    $ordenar = "ASC";
                }
                if ($ordenar === 'Z') {
                    $ordenar = "DESC";
                }
            }
            if ($ordenar===NULL) {
             $ordenar = "DESC";  
             $campo="position"; 
            }
            
            // cambiar orden de campo id_product a position
            if(isset($campo) && strtolower($campo) == 'id_product'){
               $campo="position"; 
               $ordenar = "DESC";  
            }
 // return 'campo -> '.$campo.' ordener -> '.$ordenar;
            $search = new Search();

            $results = $search->findWsMobile(1, $buscar, $pagina, $filas, $campo, $ordenar, FALSE, FALSE);

            if ((int) $results['total'] > 0) {

                $total_filas = (int) $results['total'];
                $total_paginas = ceil($total_filas / $filas);

                $inicio = 0;

                if ($pagina > $total_paginas | $pagina == 1) {
                    $pagina = 1;
                    $inicio = 0;
                } else {
                    $inicio = ($pagina - 1) * $filas;
                }

                $array_productos['total_paginas'] = $total_paginas;
                $array_productos['total_filas'] = $total_filas;
                $array_productos['pagina'] = $pagina;
                $array_productos['filas'] = $filas;

                $array_prod = NULL;
                if ($results['result'] != NULL) {
                    foreach ($results['result'] as $value) {

                        $value['description'] = strip_tags($value['description']);
                        $value['description_short'] = strip_tags($value['description_short']);
                        $value['price'] = Tools::ps_round($value['price'], 2);
                        $value['price'] = number_format( $value['price'] ,2, '.', '');
                        
                         $value['position'] = 1;

                        $array_prod[] = array($value, 'imgs' => $this->imgs_product($value['id_product']), 'img_laboratorio' => 'http://www.farmalisto.com.co/img/tmp/manufacturer_mini_74_1.jpg');
                    }
                    if ($array_prod != NULL) {
                        $array_productos['productos'] = $array_prod;
                        return $array_productos;
                    }
                }
            }
        }
        return false;
    }

    public function buscarProductosCategoria($ids_categoria, $pagina=1,$filas=10, $ordenar=null,$campo=null)
  { 
     $array_productos=NULL;   
    
     $buscar= $ids_categoria;
     
$busqueda=NULL;

     foreach ($buscar as $value) {
         $var=str_replace(" ", "", $this->remomeCharSql($value)); 
         if(is_numeric($var))
         $busqueda[]=$var;        
     }
       
 if($busqueda!=NULL)       
 {  
        
        $total_filas = 0;
        $query = " select COUNT(prod.id_product) total 
from 
ps_product prod
INNER JOIN 
ps_product_lang prodl on(prod.id_product=prodl.id_product)
INNER JOIN ps_category_product cat_prod ON (cat_prod.id_product=prod.id_product)
INNER JOIN ps_product_shop prods ON (prod.id_product=prods.id_product AND prod.active = prods.active)
INNER JOIN ps_category_lang cat_prodl ON (cat_prod.id_category=cat_prodl.id_category) 
WHERE cat_prodl.id_category in ('".implode("','",$busqueda)."') limit 1;";
        
       
if ($results = Db::getInstance()->ExecuteS($query)) {
            foreach ($results as $value) {
                $total_filas = (int) $value['total'];
            }
        }
        
        $total_paginas = ceil($total_filas / $filas);

        $inicio = 0;

        if ( $pagina > $total_paginas | $pagina == 1) {
            $pagina = 1;
            $inicio = 0;
        } else {
            $inicio = ($pagina - 1) * $filas;
        }
        
$array_productos['total_paginas']=$total_paginas;
$array_productos['total_filas']=$total_filas;
$array_productos['pagina']=$pagina;
$array_productos['filas']=$filas;

$query = " SELECT prod.id_product , prod.reference, prodl.`name`,prodl.description, prodl.description_short , cat_prod.id_category, 
                  CASE prod.id_tax_rules_group
                  WHEN  0 THEN prod.price
                  ELSE IF(taxr.id_tax != 0,prod.price + (prod.price * tax.rate/100),prod.price)
                  END
                  AS `price`, prod.price as precio
          FROM ps_product prod
          INNER JOIN ps_product_lang prodl on(prod.id_product=prodl.id_product)
          INNER JOIN ps_category_product cat_prod ON (cat_prod.id_product=prod.id_product)
          INNER JOIN ps_product_shop prods ON (prod.id_product=prods.id_product AND prod.active = prods.active)
          INNER JOIN ps_category_lang cat_prodl ON (cat_prod.id_category=cat_prodl.id_category)
          LEFT JOIN ps_tax_rule taxr ON(prod.id_tax_rules_group = taxr.id_tax_rules_group)
          LEFT JOIN ps_tax tax ON(taxr.id_tax = tax.id_tax) 
          WHERE cat_prodl.id_category in ('".implode("','",$busqueda)."') "
      . " AND prod.active=1 AND prods.active=1 AND prod.active=1 
          AND prod.is_virtual=0 AND prods.visibility='both';";

   /*
 * Validacioner ordenar
 */
if($ordenar!=NULL && $campo!=NULL)
{
    
     if($ordenar==='A')
    {
        $ordenar="ASC";
    }
    if($ordenar==='Z'){
        $ordenar="DESC";
    }
    
    $query.=" ORDER BY `".$campo."` ".$ordenar;
   
}else{   
      
$query.=" ORDER BY prodl.id_product ASC";
    }
    
$query.=" LIMIT ".$inicio.", ".$filas.";";

$array_prod=NULL;

          if ($results = Db::getInstance()->ExecuteS($query)) {
              foreach ($results as $value) {
                 
                  $value['description']=strip_tags($value['description']);
                  $value['description_short']=strip_tags($value['description_short']);
                  $value['price'] = Tools::ps_round($value['price'], 2);
                  $value['price'] = number_format( $value['price'] ,2, '.', '');
                  $array_prod[]= array($value,'imgs'=>$this->imgs_product($value['id_product']),'img_laboratorio'=>'http://www.farmalisto.com.co/img/tmp/manufacturer_mini_74_1.jpg');
                   
              }
              if($array_prod!=NULL)
              {
               $array_productos['productos']=$array_prod;  
               return $array_productos;
              }
        }
 
    }
  
    
    return false;
}

function remomeCharSql($string, $length = NULL){
	$string = trim($string);
        
        $array=array("\"","#","$","%","&","'","(",")","*","+",",","-","/",":",";","<","=",">","?","@","[","]","^","`","{","|","}","~");
	$string = utf8_decode($string);
	$string = htmlentities($string, ENT_NOQUOTES| ENT_IGNORE, "UTF-8");
	$string = str_replace($array, "", $string);        
        $string = preg_replace( "/([ ]+)/", " ", $string );
	
	$length = intval($length);
	if ($length > 0){
		$string = substr($string, 0, $length);
	}
	return $string;
}

function getToken()
{
   $salt = $this->randString();
   // genera token de forma aleatoria
   $token = md5(sha1($salt).md5(uniqid(microtime(), true)));
   // genera fecha de generaciÃ³n del token
   //$tokenTime = time();
   // escribe la informaciÃ³n del token en sesiÃ³n para poder
   //$_SESSION['AntiCsrf']['webservicemobile_token'] = array('token'=>$token, 'time'=>$tokenTime); 
   $time_token= $this->sumarMinutos(time(),15);
   
    $query="insert into ps_token_mobile (token, time) VALUES('".$token."','".date('Y-m-d H:i:s',$time_token)."' ); ";
   
    if ($results = Db::getInstance()->ExecuteS($query)) {
   
   return $token;
    }
   
   
  return false;

  
}

function randString ($length = 32)
{  
$string = "";
$possible = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXY";
$i = 0;
while ($i < $length)
 {    
$char = substr($possible, mt_rand(0, strlen($possible)-1), 1);
$string .= $char;    
$i++;  
}  
return $string;
}

private function sumarMinutos($segundos,$minutos)
{
    $retorno = NULL;
            
    $mes    = date("m",$segundos);
    $dia    = date("d",$segundos);
    $anyo   = date("Y",$segundos);
    $hora   = date("H",$segundos);
    $minuto = date("i",$segundos)+ $minutos;

    $sumadeMeses = mktime($hora,$minuto,0,$mes,$dia,$anyo);

    $retorno = $sumadeMeses;

    return $retorno;
}



//public function logtxt ($text="") { 
// $fp=fopen("C:/wamp/www/archivo.txt","a+"); fwrite($fp,$text."\r\n"); fclose($fp);
//
//}


function sanear_string($string)
{

$string= utf8_encode($string);

$a = array('Ã€', 'Ã?', 'Ã‚', 'Ãƒ', 'Ã„', 'Ã…', 'Ã†', 'Ã‡', 'Ãˆ', 'Ã‰', 'ÃŠ', 'Ã‹', 'ÃŒ', 'Ã?', 'ÃŽ', 'Ã?', 'Ã?', 'Ã‘', 'Ã’', 'Ã“', 'Ã”', 'Ã•', 'Ã–', 'Ã˜', 'Ã™', 'Ãš', 'Ã›', 'Ãœ', 'Ã?', 'ÃŸ', 'Ã ', 'Ã¡', 'Ã¢', 'Ã£', 'Ã¤', 'Ã¥', 'Ã¦', 'Ã§', 'Ã¨', 'Ã©', 'Ãª', 'Ã«', 'Ã¬', 'Ã­', 'Ã®', 'Ã¯', 'Ã±', 'Ã²', 'Ã³', 'Ã´', 'Ãµ', 'Ã¶', 'Ã¸', 'Ã¹', 'Ãº', 'Ã»', 'Ã¼', 'Ã½', 'Ã¿', 'Ä€', 'Ä?', 'Ä‚', 'Äƒ', 'Ä„', 'Ä…', 'Ä†', 'Ä‡', 'Äˆ', 'Ä‰', 'ÄŠ', 'Ä‹', 'ÄŒ', 'Ä?', 'ÄŽ', 'Ä?', 'Ä?', 'Ä‘', 'Ä’', 'Ä“', 'Ä”', 'Ä•', 'Ä–', 'Ä—', 'Ä˜', 'Ä™', 'Äš', 'Ä›', 'Äœ', 'Ä?', 'Äž', 'ÄŸ', 'Ä ', 'Ä¡', 'Ä¢', 'Ä£', 'Ä¤', 'Ä¥', 'Ä¦', 'Ä§', 'Ä¨', 'Ä©', 'Äª', 'Ä«', 'Ä¬', 'Ä­', 'Ä®', 'Ä¯', 'Ä°', 'Ä±', 'Ä²', 'Ä³', 'Ä´', 'Äµ', 'Ä¶', 'Ä·', 'Ä¹', 'Äº', 'Ä»', 'Ä¼', 'Ä½', 'Ä¾', 'Ä¿', 'Å€', 'Å?', 'Å‚', 'Åƒ', 'Å„', 'Å…', 'Å†', 'Å‡', 'Åˆ', 'Å‰', 'ÅŒ', 'Å?', 'ÅŽ', 'Å?', 'Å?', 'Å‘', 'Å’', 'Å“', 'Å”', 'Å•', 'Å–', 'Å—', 'Å˜', 'Å™', 'Åš', 'Å›', 'Åœ', 'Å?', 'Åž', 'ÅŸ', 'Å ', 'Å¡', 'Å¢', 'Å£', 'Å¤', 'Å¥', 'Å¦', 'Å§', 'Å¨', 'Å©', 'Åª', 'Å«', 'Å¬', 'Å­', 'Å®', 'Å¯', 'Å°', 'Å±', 'Å²', 'Å³', 'Å´', 'Åµ', 'Å¶', 'Å·', 'Å¸', 'Å¹', 'Åº', 'Å»', 'Å¼', 'Å½', 'Å¾', 'Å¿', 'Æ’', 'Æ ', 'Æ¡', 'Æ¯', 'Æ°', 'Ç?', 'ÇŽ', 'Ç?', 'Ç?', 'Ç‘', 'Ç’', 'Ç“', 'Ç”', 'Ç•', 'Ç–', 'Ç—', 'Ç˜', 'Ç™', 'Çš', 'Ç›', 'Çœ', 'Çº', 'Ç»', 'Ç¼', 'Ç½', 'Ç¾', 'Ç¿', 'Î†', 'Î¬', 'Îˆ', 'Î­', 'ÎŒ', 'ÏŒ', 'Î?', 'ÏŽ', 'ÎŠ', 'Î¯', 'ÏŠ', 'Î?', 'ÎŽ', 'Ï?', 'Ï‹', 'Î°', 'Î‰', 'Î®');
  $b = array('A', 'A', 'A', 'A', 'A', 'A', 'AE', 'C', 'E', 'E', 'E', 'E', 'I', 'I', 'I', 'I', 'D', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'U', 'U', 'U', 'U', 'Y', 's', 'a', 'a', 'a', 'a', 'a', 'a', 'ae', 'c', 'e', 'e', 'e', 'e', 'i', 'i', 'i', 'i', 'n', 'o', 'o', 'o', 'o', 'o', 'o', 'u', 'u', 'u', 'u', 'y', 'y', 'A', 'a', 'A', 'a', 'A', 'a', 'C', 'c', 'C', 'c', 'C', 'c', 'C', 'c', 'D', 'd', 'D', 'd', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'G', 'g', 'G', 'g', 'G', 'g', 'G', 'g', 'H', 'h', 'H', 'h', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'IJ', 'ij', 'J', 'j', 'K', 'k', 'L', 'l', 'L', 'l', 'L', 'l', 'L', 'l', 'l', 'l', 'N', 'n', 'N', 'n', 'N', 'n', 'n', 'O', 'o', 'O', 'o', 'O', 'o', 'OE', 'oe', 'R', 'r', 'R', 'r', 'R', 'r', 'S', 's', 'S', 's', 'S', 's', 'S', 's', 'T', 't', 'T', 't', 'T', 't', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'W', 'w', 'Y', 'y', 'Y', 'Z', 'z', 'Z', 'z', 'Z', 'z', 's', 'f', 'O', 'o', 'U', 'u', 'A', 'a', 'I', 'i', 'O', 'o', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'A', 'a', 'AE', 'ae', 'O', 'o', 'Î‘', 'Î±', 'Î•', 'Îµ', 'ÎŸ', 'Î¿', 'Î©', 'Ï‰', 'Î™', 'Î¹', 'Î¹', 'Î¹', 'Î¥', 'Ï…', 'Ï…', 'Ï…', 'Î—', 'Î·');
 
  return str_replace($a, $b, $string);

}

} 