<?php

include(dirname(__FILE__) . '/../../config/config.inc.php');
include(dirname(__FILE__) . '/../../init.php');
require_once(_PS_MODULE_DIR_ . 'payulatam/payulatam.php');
require_once(_PS_MODULE_DIR_ . 'payulatam/config.php');
require_once(_PS_MODULE_DIR_ . 'payulatam/paymentws.php');

class SondaPayu extends PayUControllerWS {


public function updatePendyngOrdes(){

$contar= 1;
	$orders_pendyng = $this->getPendyngOrders();

	foreach ($orders_pendyng as $key ) {
echo '<br><b>Contador: '.$contar.'</b><br>';
		// 	$order = new Order((int) $key['id_order']);


$this->getByReference( $key['reference']);
$this->getByTransactionId( $key['transactionId']);
$this->getByOrderId((int) $key['orderIdPayu']);
/*
$statePol = $this->getByOrderId((int) $key['orderIdPayu']);
 						
 						if ($statePol == 7)
                            if($order-> getCurrentState() != (int) Configuration::get('PAYU_WAITING_PAYMENT') )
                            $order->setCurrentState((int) Configuration::get('PAYU_WAITING_PAYMENT'));
                        else if ($statePol == 4)
                            if($order-> getCurrentState() != (int) Configuration::get('PS_OS_PAYMENT') )
                            $order->setCurrentState((int) Configuration::get('PS_OS_PAYMENT'));
                        else {
                            if($order-> getCurrentState() != (int) Configuration::get('PS_OS_ERROR') )
                            $order->setCurrentState((int) Configuration::get('PS_OS_ERROR'));

                        if (_PS_VERSION_ >= 1.5) {
                    		$payment = $order->getOrderPaymentCollection();
                    		if (isset($payment[0])) {
                        		$payment[0]->transaction_id = pSQL("payU_farmalisto_".$idCart);
                        		$payment[0]->save();
                    		}
                		}

	}
  */
  $contar++;
}
}

public function getByOrderId($order_id){

			$conf = new ConfPayu();
			$keysPayu = $conf->keys();
			$data = '{
   					"test":';
        if($conf->isTest()){
          $data.='true';
          }else{
           $data.='false';
          }
      $data.=',
   					  "language":"es",
   					  "command":"ORDER_DETAIL",
   					  "merchant":{
      							       "apiLogin":"'.$keysPayu['apiLogin'].'",
      							       "apiKey":"'.$keysPayu['apiKey'].'"
   								       },
   					  "details":{
      							     "orderId":'.(int)$order_id.'
   							        }
				    }';

      echo '<br><b>orderId</b><pre>'.print_r($data,true).'</pre><br>';
			$response= $conf->sendJson($data);
      echo('<pre>'.print_r(json_encode($response),true));

}

public function getPendyngOrders()
{ 
  $results = false;
	$sql="SELECT orders.id_cart,orders.id_order, payu.orderIdPayu,payu.transactionId,CONCAT('payU_farmalisto_', contador.id_cart,'_', contador.contador) AS reference
        FROM "._DB_PREFIX_."orders orders INNER JOIN "._DB_PREFIX_."pagos_payu payu ON(orders.id_cart = payu.id_cart)
        INNER JOIN "._DB_PREFIX_."sonda_payu sonda ON(orders.id_cart = sonda.id_cart) INNER JOIN "._DB_PREFIX_."count_pay_cart contador ON (orders.id_cart = contador.id_cart)
			   WHERE orders.current_state = 18 AND payu.orderIdPayu !=0 AND ( sonda.date_add + INTERVAL sonda.`interval` MINUTE) < '".date("Y-m-d H:i:s")."' ORDER BY orders.id_order;";
         //echo'<pre>'.$sql.'</pre>';
   if ($results = Db::getInstance()->ExecuteS($sql) ) {   
    return $results;
  }else{
    return array();  
  }
}

public function pingPayu(){

        $conf = new ConfPayu();
        $keysPayu = $conf->keys();
  
        $data='{
                "test": ';
        if($conf->isTest()){
          $data.='true';
          }else{
           $data.='false';
          }
        $data.=',
                "language": "es",
                "command": "PING",
                "merchant":
                            {
                              "apiLogin": "'.$keysPayu['apiLogin'].'",
                              "apiKey": "'.$keysPayu['apiKey'].'"
                            }
              }';
        echo '<pre>'.print_r($data,true).'</pre><br>';
        $response= $conf->sendJson($data);
        echo('<pre>'.print_r(json_encode($response),true).'</pre>');

}

public function getByTransactionId($transaction_id){
 
  $conf = new ConfPayu();
  $keysPayu = $conf->keys();
  $data='{
          "test":';
          if($conf->isTest()){
          $data.='true';
          }else{
           $data.='false';
          }
          $data.=',
          "language":"es",
          "command":"TRANSACTION_RESPONSE_DETAIL",
          "merchant":{
          "apiLogin":"'.$keysPayu['apiLogin'].'",
          "apiKey":"'.$keysPayu['apiKey'].'"
            },
          "details":{
          "transactionId":"'.$transaction_id.'"
            }
        }';

  echo '<br><b>transactionId</b><pre>'.print_r($data,true).'</pre><br>';
  $response= $conf->sendJson($data);
  echo('<pre>'.print_r(json_encode($response),true).'</pre>');
}

public function getByReference($reference){

  $conf = new ConfPayu();
  $keysPayu = $conf->keys();
 
  $data='{
          "test":';
          if($conf->isTest()){
          $data.='true';
          }else{
           $data.='false';
          }
          $data.=',
          "language":"es",
          "command":"ORDER_DETAIL_BY_REFERENCE_CODE",
          "merchant":{
                      "apiLogin":"'.$keysPayu['apiLogin'].'",
                      "apiKey":"'.$keysPayu['apiKey'].'"
        },
          "details":{
          "referenceCode":"'.$reference.'"
          }
        }';

          echo '<br><b>referenceCode</b><pre>'.print_r($data,true).'</pre><br>';
  $response= $conf->sendJson($data);
  echo('<pre>'.print_r(json_encode($response),true).'</pre>');
}

public function getPendyngOrdesConfirmation(){
  $sql="SELECT orders.id_cart,orders.id_order, payu.orderIdPayu,payu.transactionId,CONCAT('payU_farmalisto_', contador.id_cart,'_', contador.contador) AS reference,confirmacion.message
      FROM "._DB_PREFIX_."orders orders INNER JOIN "._DB_PREFIX_."pagos_payu payu ON(orders.id_cart = payu.id_cart)
      INNER JOIN "._DB_PREFIX_."sonda_payu sonda ON(orders.id_cart = sonda.id_cart) INNER JOIN "._DB_PREFIX_."count_pay_cart contador ON (orders.id_cart = contador.id_cart)
      INNER JOIN "._DB_PREFIX_."log_payu_response confirmacion ON(contador.id_cart = confirmacion.id_cart)
      WHERE orders.current_state = 18 AND payu.orderIdPayu !=0 ORDER BY orders.id_order;
      ";
      // echo '<pre>'.print_r($sql,true).'</pre>';
     if ($results = Db::getInstance()->ExecuteS($sql) ) {   
    return $results;
  }else{
    return array();  
  }    
}


public function updatePendyngOrdesConfirmation(){

  $orders_pendyng = $this->getPendyngOrdesConfirmation();

  foreach ($orders_pendyng as $key ) {


          $order = new Order((int) $key['id_order']);
          $statePol = $this->getStatePolBymessagePol( $key['message']);
          echo'<br> statePol: '.$statePol;
            
                        if ($statePol == 7){
                            if($order-> getCurrentState() != (int) Configuration::get('PAYU_WAITING_PAYMENT') )
                            $order->setCurrentState((int) Configuration::get('PAYU_WAITING_PAYMENT'));
                        }
                        else if ($statePol == 4){
                            if($order-> getCurrentState() != (int) Configuration::get('PS_OS_PAYMENT') )
                            $order->setCurrentState((int) Configuration::get('PS_OS_PAYMENT'));
                        }
                        else {
                            if($order-> getCurrentState() != (int) Configuration::get('PS_OS_ERROR') ){
                            $order->setCurrentState((int) Configuration::get('PS_OS_ERROR'));
                            }  
                          }

        if (_PS_VERSION_ >= 1.5) {
            $payment = $order->getOrderPaymentCollection();
            if (isset($payment[0])) {
               $payment[0]->transaction_id = pSQL("payU_farmalisto_".$key['id_cart']);
               $payment[0]->save();
            }
        }                          
echo '<br>Order: '.$key['id_order'];
  }
}

public function getStatePolBymessagePol($message_pol){
  switch ($message_pol) {
    case 'APPROVED':
      return 4;
      break;

    case 'ANTIFRAUD_REJECTED':
      return 6;
      break;

    case 'BANK_UNREACHABLE':
      return 6;
      break;

      case 'ERROR_CONVERTING_TRANSACTION_AMOUNTS':
      return 6;
      break;
      
    case 'EXPIRED_CARD':
      return 6;
      break;

    case 'EXPIRED_TRANSACTION':
      return 5;
      break;
    case 'INTERNAL_PAYMENT_PROVIDER_ERROR':
      return 6;
      break; 
    case 'INVALID_CARD':
      return 6;
      break; 
    case 'NOT_ACCEPTED_TRANSACTION':
      return 6;
      break; 
      case 'PAYMENT_NETWORK_REJECTED':
      return 6;
      break; 
      case 'RESTRICTED_CARD':
      return 6;
      break;                                               
    
    default:
      return 6;
      break;
  }
}

}

?>