<?php

class FrontController extends FrontControllerCore
{
	
public function initContent() {
        $ubucacion = '';
        if (isset($this->context->controller->php_self)) {
            $ubucacion = $this->context->controller->php_self;
        }
        if ($ubucacion === 'authentication' || $ubucacion === 'order') {
            self::$smarty->assign('lightboxshow', 'no');
        } else {
            self::$smarty->assign('lightboxshow', 'si');
        }
        //(order,authentication,)
        // validaciones para el control del ligthbox 
        self::$smarty->assign('iexplorerold', FALSE);
        self::$smarty->assign('lightbox1', FALSE);

        preg_match('/MSIE (.*?);/', $_SERVER['HTTP_USER_AGENT'], $matches);
        if (count($matches) > 1) {
            $version = $matches[1];

            if ($version < 11) {
                if (!isset($_COOKIE['iexplorerOld'])) {
                    setcookie("iexplorerOld", 'iexplorerOld', time() + 3600 * 24 * 30);
                    self::$smarty->assign('iexplorerold', TRUE);
                    self::$smarty->assign('lightbox1', TRUE);
                }
            }
        }

        self::$smarty->assign('newsletter', FALSE);
        self::$smarty->assign('lightbox1', FALSE);

        include(dirname(__FILE__) . '/../../../classes/Mobile_Detect.php');
        $detect = new Mobile_Detect;
        $deviceType = ($detect->isMobile() ? ($detect->isTablet() ? 'tablet' : 'phone') : 'computer');

        $time = time();
        if (!isset($_COOKIE['lightboxsTime'])) {
        	setcookie("lightboxsTime", json_encode(array('timeIni' =>  $time + 20,'timeAfater' => $time)), time() + 3600);
        }else{
        		$arrayTime = json_decode($_COOKIE['lightboxsTime'],TRUE);
        		$arrayTime['timeAfater'] = time();
        		setcookie("lightboxsTime", json_encode($arrayTime), time() + 3600);
        		}

        if ($deviceType != 'phone' && $deviceType != 'tablet') {
// si el cliente no es un bot
            if (!$this->is_bot()) {
                // si la cookie no existe   
                if (!isset($_COOKIE['newsletter'])) {
                   // setcookie("newsletter", 'newsletter', time() + 3600 * 24 * 5);
                    self::$smarty->assign('newsletter', TRUE);
                    self::$smarty->assign('lightbox1', TRUE);
                 }
            }
        }

		// si esta activa la redirección entre paises se envia una variable smarty como true para generar el pop-up para la redirección
		if ( Configuration::get('PS_REDIRECTION_COUNTRIES') == 1 ) {

			// se instancian los archivos necesarios para realizar la geolocalizacion por ip
			include_once(_PS_MODULE_DIR_ ."../tools/geoip/geoip.inc");
			include_once(_PS_MODULE_DIR_ ."../tools/geoip/geoipcity.inc");

			// se consulta el pais en el que se encuentra el usuario
			$geoip = geoip_open(_PS_MODULE_DIR_ .'../tools/geoip/GeoLiteCity.dat','1');

			//$_SERVER['REMOTE_ADDR'] = '186.180.255.255';

			$CountryAccessUserLocal = geoip_country_name_by_addr($geoip, $_SERVER['REMOTE_ADDR']);

			// se trae la extension a la cual se desea redireccionar
			$ExtPage = strtolower( geoip_country_code_by_addr($geoip, $_SERVER['REMOTE_ADDR']) );

			// arreglo con las extenciones de las paginas existentes
			$ExtValid = array('co','mx');

			$ShopCountry = Utilities::sanear_string( Configuration::get('PS_SHOP_COUNTRY') );

			// se valida si el pais de la pagina es igual a la ciudad del usuario, si no son iguales, se genera el pop-up
			if ( $CountryAccessUserLocal != $ShopCountry && $CountryAccessUserLocal != "" && in_array($ExtPage, $ExtValid) ) {
				self::$smarty->assign('redirection_countries', true);
				self::$smarty->assign('country_page_local', Configuration::get('PS_SHOP_COUNTRY'));
				self::$smarty->assign('country_page_redirect', $CountryAccessUserLocal );
				self::$smarty->assign('url_page_redirection', 'http://www.farmalisto.com.'.$ExtPage);
				setcookie("CookRedirectionMexico", 'CookRedirectionMexico', time() + 3600 * 2);
			}
		}

        // inicio Para inhabilitar el lightbox en mexico EWING
        //self::$smarty->assign('newsletter', FALSE);
        //self::$smarty->assign('lightbox1', FALSE);
        // fin Para inhabilitar el lightbox en mexico EWING


// Fin validaciones para el control del ligthbox      


        $this->process();
		if (!isset($this->context->cart))
			$this->context->cart = new Cart();
		if ($this->context->getMobileDevice() == false) {
			// These hooks aren't used for the mobile theme.
			// Needed hooks are called in the tpl files.
			if (!isset($this->context->cart))
				$this->context->cart = new Cart();
			$this->context->smarty->assign(array(
				'HOOK_HEADER' => Hook::exec('displayHeader'),
				'HOOK_TOP' => Hook::exec('displayTop'),
				'HOOK_HOMETOPDER' => Hook::exec('hometopder'),
				'HOOK_HOMEBOTCEN' => Hook::exec('homebotcen'),
				'HOOK_PRPAMIDCEN' => Hook::exec('prpamidcen'),
				'HOOK_PRPABOTCEN' => Hook::exec('prpabotcen'),
				'HOOK_SEARBOTCEN' => Hook::exec('searbotcen'),
				'HOOK_CATETOPIZQ' => Hook::exec('catetopizq'),
				'HOOK_CATETOPDER' => Hook::exec('catetopder'),
				'HOOK_CATEBOTCEN' => Hook::exec('catebotcen'),
				'HOOK_IMACATEGORY' => Hook::exec('imacategory'),
				'HOOK_ADSENSES' => Hook::exec('adsenses'),
				'HOOK_LEFT_COLUMN' => ($this->display_column_left ? Hook::exec('displayLeftColumn') : ''),
				'HOOK_RIGHT_COLUMN' => ($this->display_column_right ? Hook::exec('displayRightColumn', array('cart' => $this->context->cart)) : ''),
			));
		} else {
			$this->context->smarty->assign(array(
				'HOOK_MOBILE_HEADER' => Hook::exec('displayMobileHeader'),
			));
		}
    }
    
            
function is_bot(){
     
        $bots = array(
            'Googlebot', 'Baiduspider', 'ia_archiver',
            'R6_FeedFetcher', 'NetcraftSurveyAgent', 'Sogou web spider',
            'bingbot', 'Yahoo! Slurp', 'facebookexternalhit', 'PrintfulBot',
            'msnbot', 'Twitterbot', 'UnwindFetchor',
            'urlresolver', 'Butterfly', 'TweetmemeBot' );
     
        foreach($bots as $b){
            if( stripos( $_SERVER['HTTP_USER_AGENT'], $b ) !== false ) return true;
     
        }
        return false;
    }

	/**
	 * @deprecated 1.5.0
	 */
	public function displayHeader($display = true)
	{
		// This method will be removed in 1.6
		Tools::displayAsDeprecated();
		$this->initHeader();
		$hook_header = Hook::exec('displayHeader');
		if ((Configuration::get('PS_CSS_THEME_CACHE') || Configuration::get('PS_JS_THEME_CACHE')) && is_writable(_PS_THEME_DIR_.'cache'))
		{
			// CSS compressor management
			if (Configuration::get('PS_CSS_THEME_CACHE'))
				$this->css_files = Media::cccCSS($this->css_files);
			//JS compressor management
			if (Configuration::get('PS_JS_THEME_CACHE'))
				$this->js_files = Media::cccJs($this->js_files);
		}

		// Call hook before assign of css_files and js_files in order to include correctly all css and javascript files
        $this->context->smarty->assign(array(
			'HOOK_HEADER' => $hook_header,
			'HOOK_TOP' => Hook::exec('displayTop'),
			'HOOK_HOMETOPDER' => Hook::exec('hometopder'),
			'HOOK_HOMEBOTCEN' => Hook::exec('homebotcen'),
			'HOOK_PRPAMIDCEN' => Hook::exec('prpamidcen'),
			'HOOK_PRPABOTCEN' => Hook::exec('prpabotcen'),
			'HOOK_SEARBOTCEN' => Hook::exec('searbotcen'),
			'HOOK_CATETOPIZQ' => Hook::exec('catetopizq'),
			'HOOK_CATETOPDER' => Hook::exec('catetopder'),
			'HOOK_CATEBOTCEN' => Hook::exec('catebotcen'),
			'HOOK_IMACATEGORY' => Hook::exec('imacategory'),
			'HOOK_ADSENSES' => Hook::exec('adsenses'),
			'HOOK_LEFT_COLUMN' => ($this->display_column_left ? Hook::exec('displayLeftColumn') : ''),
			'HOOK_RIGHT_COLUMN' => ($this->display_column_right ? Hook::exec('displayRightColumn', array('cart' => $this->context->cart)) : ''),
			'HOOK_FOOTER' => Hook::exec('displayFooter')
		));

		$this->context->smarty->assign('css_files', $this->css_files);
		$this->context->smarty->assign('js_files', array_unique($this->js_files));

		$this->display_header = $display;
		$this->smartyOutputContent(_PS_THEME_DIR_.'header.tpl');

	}
	

        
}
?>